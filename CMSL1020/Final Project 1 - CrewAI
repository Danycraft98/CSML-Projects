{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyO/ojZKuh9f6xGmIWHPpOhT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# OVERVIEW\n","\n","A weather chatbot powered by CrewAI, providing real-time weather updates and forecasts.\n","\n","## Features\n","* Real-time weather information for any city\n","* Current conditions including temperature, humidity, and weather description\n","* 3-day weather forecasts\n","* Extreme weather alerts\n","\n","## Tech Stack\n","* Python\n","* CrewAI for agent-based automation\n","* LangChain for tool management\n","* Tomorrow.io Weather API\n","* OpenAI for natural language processing"],"metadata":{"id":"b5v99-f2uGY-"}},{"cell_type":"markdown","source":["# GETTING STARTED\n","\n","## INSTALL DEPENDENCIES\n","The code below is used to install all the packages used in this colab."],"metadata":{"id":"QzdKEzYMrPDY"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EEm4dIt8dWmH","executionInfo":{"status":"ok","timestamp":1741032893773,"user_tz":300,"elapsed":1921,"user":{"displayName":"Daniel Lee (Danycraft)","userId":"12763388381882523006"}},"outputId":"a2b2649f-3f9c-45e7-c2a3-c047046c1485"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: python-dotenv in /usr/local/lib/python3.11/dist-packages (1.0.1)\n"]}],"source":["!pip install crewai\n","!pip install requests\n","!pip install openai\n","!pip install langchain\n","!pip install langchain-openai"]},{"cell_type":"markdown","source":["## SET-UP ENVIRONMENT VARIABLES"],"metadata":{"id":"8B5mtBS8rUAH"}},{"cell_type":"code","source":["import os\n","\n","from dotenv import load_dotenv\n","\n","# Load environment variables\n","load_dotenv(\"test.env\")\n","\n","# API Configuration\n","OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n","TOMORROW_API_KEY = os.getenv(\"TOMORROW_API_KEY\")\n","\n","# Weather API Configuration\n","WEATHER_API_BASE_URL = \"https://api.tomorrow.io/v4/weather/realtime\"\n","FORECAST_API_BASE_URL = \"https://api.tomorrow.io/v4/weather/forecast\""],"metadata":{"id":"_pNvtzLjnayC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# INITIALIZE HELPER FUNCTIONS"],"metadata":{"id":"Tz3o__QrrhzW"}},{"cell_type":"markdown","source":["## API REQUEST FUNCTION"],"metadata":{"id":"SL2J4QSTrmjv"}},{"cell_type":"code","source":["from typing import Dict\n","\n","import requests\n","\n","\n","class WeatherTools:\n","    @staticmethod\n","    def get_current_weather(location: str) -> Dict:\n","        \"\"\"Get current weather for a specific location\"\"\"\n","        params = {\"location\": location, \"apikey\": TOMORROW_API_KEY, \"units\": \"metric\"}\n","\n","        response = requests.get(WEATHER_API_BASE_URL, params=params)\n","        if response.status_code == 200:\n","            return response.json()\n","        else:\n","            raise Exception(f\"Error fetching weather data: {response.status_code}\")\n","\n","    @staticmethod\n","    def get_forecast(location: str) -> Dict:\n","        \"\"\"Get 3-day forecast for a specific location\"\"\"\n","        params = {\"location\": location, \"apikey\": TOMORROW_API_KEY, \"units\": \"metric\"}\n","\n","        response = requests.get(FORECAST_API_BASE_URL, params=params)\n","        if response.status_code == 200:\n","            return response.json()\n","        else:\n","            raise Exception(f\"Error fetching forecast data: {response.status_code}\")"],"metadata":{"id":"VOiAKcwUnXhC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## CONFIGURING WEATHER INFO ANALYST AGENT"],"metadata":{"id":"r9bfAjzirrLn"}},{"cell_type":"code","source":["from crewai import Agent\n","from langchain.tools import Tool\n","\n","\n","class WeatherAgent:\n","    def __init__(self):\n","        self.weather_tools = WeatherTools()\n","\n","    def create_weather_analyst(self) -> Agent:\n","        # Create proper tool instances\n","        current_weather_tool = Tool(\n","            name=\"get_current_weather\",\n","            func=self.weather_tools.get_current_weather,\n","            description=\"Get current weather for a specific location\",\n","        )\n","\n","        forecast_tool = Tool(\n","            name=\"get_forecast\",\n","            func=self.weather_tools.get_forecast,\n","            description=\"Get 3-day forecast for a specific location\",\n","        )\n","\n","        return Agent(\n","            role=\"Weather Information Analyst\",\n","            goal=\"Provide accurate and detailed weather information\",\n","            backstory=\"\"\"You are an expert weather analyst with years of experience in\n","            meteorology. Your job is to provide accurate weather information and\n","            interpret weather data for users in a clear and concise manner.\"\"\",\n","            tools=[current_weather_tool, forecast_tool],\n","            verbose=True,\n","        )"],"metadata":{"id":"0bgTSLKQnRzr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from typing import List\n","\n","from crewai import Task\n","\n","\n","class WeatherTasks:\n","    @staticmethod\n","    def create_weather_report_task(agent, location: str) -> Task:\n","        return Task(\n","            description=f\"\"\"Create a comprehensive weather report for {location}.\n","            1. Get the current weather conditions\n","            2. Include temperature, humidity, and weather description\n","            3. Check if there are any extreme weather conditions\n","            4. Get a 3-day forecast\n","            5. Compile all information in a user-friendly format\"\"\",\n","            agent=agent,\n","            expected_output=\"\"\"A detailed weather report containing:\n","            - Current temperature and conditions\n","            - Humidity levels\n","            - Weather description\n","            - Any extreme weather warnings\n","            - 3-day forecast summary\n","            The information should be formatted in a clear, easy-to-read manner.\"\"\",\n","        )"],"metadata":{"id":"_e4c_3SOnil6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# DEPLOY AND RUN THE APPLICATION"],"metadata":{"id":"IdecbrOWr6_u"}},{"cell_type":"code","source":["from crewai import Crew\n","\n","\n","def get_weather_report(location: str) -> str:\n","    # Initialize the weather agent\n","    weather_agent = WeatherAgent()\n","    analyst = weather_agent.create_weather_analyst()\n","\n","    # Create the weather report task\n","    tasks = [WeatherTasks.create_weather_report_task(analyst, location)]\n","\n","    # Create and run the crew\n","    crew = Crew(agents=[analyst], tasks=tasks, verbose=True)\n","\n","    result = crew.kickoff()\n","    return result\n","\n","\n","if __name__ == \"__main__\":\n","    while True:\n","        location = input(\"\\nEnter a city name (or 'quit' to exit): \")\n","        if location.lower() == \"quit\":\n","            break\n","\n","        try:\n","            weather_report = get_weather_report(location)\n","            print(f\"\\nWeather Report:\\n{weather_report}\")\n","        except Exception as e:\n","            print(f\"Error: {str(e)}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mO7998FKgtQA","executionInfo":{"status":"ok","timestamp":1741033255401,"user_tz":300,"elapsed":11496,"user":{"displayName":"Daniel Lee (Danycraft)","userId":"12763388381882523006"}},"outputId":"82243da9-2997-4293-dd9a-59d2f784fc72"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Enter a city name (or 'quit' to exit): Miami, Florida\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m\u001b[95m# Agent:\u001b[00m \u001b[1m\u001b[92mWeather Information Analyst\u001b[00m\n","\u001b[95m## Task:\u001b[00m \u001b[92mCreate a comprehensive weather report for Miami, Florida.\n","            1. Get the current weather conditions\n","            2. Include temperature, humidity, and weather description\n","            3. Check if there are any extreme weather conditions\n","            4. Get a 3-day forecast\n","            5. Compile all information in a user-friendly format\u001b[00m\n"]},{"output_type":"stream","name":"stderr","text":["ERROR:root:LiteLLM call failed: litellm.RateLimitError: RateLimitError: OpenAIException - Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}\n"]},{"name":"stdout","output_type":"stream","text":["\n","\n","LiteLLM.Info: If you need to debug this error, use `litellm._turn_on_debug()'.\n","\n","\u001b[91m Error during LLM call: litellm.RateLimitError: RateLimitError: OpenAIException - Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}\u001b[00m\n","Error: litellm.RateLimitError: RateLimitError: OpenAIException - Error code: 429 - {'error': {'message': 'You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.', 'type': 'insufficient_quota', 'param': None, 'code': 'insufficient_quota'}}\n","\n","Enter a city name (or 'quit' to exit): quit\n"]}]}]}