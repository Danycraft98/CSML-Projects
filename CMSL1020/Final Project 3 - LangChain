{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyPqJfetzD2XncgrBEPSvOoT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# OVERVIEW\n","\n","A weather chatbot powered by OpenAI with LangChain, providing real-time weather updates and forecasts.\n","\n","## Features\n","* Real-time weather information for any city\n","* Current conditions including temperature, humidity, and weather description\n","* Extreme weather alerts\n","\n","## Tech Stack\n","* Python\n","* OpenAI for agent-based automation\n","* LangChain for tool management\n","* OpenWeatherMap API"],"metadata":{"id":"b5v99-f2uGY-"}},{"cell_type":"markdown","source":["# GETTING STARTED\n","\n","## INSTALL DEPENDENCIES\n","The code below is used to install all the packages used in this colab."],"metadata":{"id":"QzdKEzYMrPDY"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EEm4dIt8dWmH","executionInfo":{"status":"ok","timestamp":1741961925664,"user_tz":240,"elapsed":3438,"user":{"displayName":"Daniel Lee (Danycraft)","userId":"12763388381882523006"}},"outputId":"742924ab-f980-444f-cf64-664a2b49b5e3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting python-dotenv\n","  Downloading python_dotenv-1.0.1-py3-none-any.whl.metadata (23 kB)\n","Downloading python_dotenv-1.0.1-py3-none-any.whl (19 kB)\n","Installing collected packages: python-dotenv\n","Successfully installed python-dotenv-1.0.1\n"]}],"source":["!pip install openai\n","!pip install langchain\n","!pip install langchain-openai\n","!pip install python-dotenv"]},{"cell_type":"markdown","source":["## SET-UP ENVIRONMENT VARIABLES"],"metadata":{"id":"8B5mtBS8rUAH"}},{"cell_type":"code","source":["import os\n","\n","from dotenv import load_dotenv\n","\n","# Load environment variables\n","load_dotenv(\"test.env\")\n","\n","# API Configuration\n","OPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n","WEATHER_API_KEY = os.getenv(\"OPENWEATHERMAP_API_KEY\")\n","\n","# Weather API Configuration\n","WEATHER_API_BASE_URL = \"https://api.tomorrow.io/v4/weather/realtime\"\n","FORECAST_API_BASE_URL = \"https://api.tomorrow.io/v4/weather/forecast\""],"metadata":{"id":"_pNvtzLjnayC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# INITIALIZE HELPER FUNCTIONS"],"metadata":{"id":"Tz3o__QrrhzW"}},{"cell_type":"markdown","source":["## API REQUEST FUNCTION"],"metadata":{"id":"SL2J4QSTrmjv"}},{"cell_type":"code","source":["from typing import Dict\n","\n","import requests\n","\n","\n","import os\n","import requests\n","from dotenv import load_dotenv\n","from datetime import datetime, timezone\n","\n","load_dotenv()\n","\n","\n","class OpenWeatherMapAPIWrapper:\n","    \"\"\"Wrapper class for OpenWeatherMap API.\"\"\"\n","    def __init__(self):\n","        self.current_template = \"\"\"Location: {location}\n","Current time at this location is {time}.\n","Current weather is {weather} with a temperature of {temp:.0f}°C, humidity of {humidity}%, UV index of {uvi:.0f}, cloud coverage of {clouds}%, wind speed of {wind_speed:.0f} m/s.\n","There is {rain:.1f} mm/h of rain and {snow:.1f} mm/h of snow.\"\"\"\n","        self.future_template = \"\"\"Date: {date}\n","Weather summary: {summary}\n","Weather is {weather} with a temperature of {temp_morn:.0f}°C in the morning, {temp_day:.0f}°C at day, {temp_eve:.0f}°C in the evening, and {temp_night:.0f}°C at night.\n","Humidity is {humidity}%, the UV index is {uvi:.0f}, cloud coverage is {clouds}%, wind speed is {wind_speed:.0f} m/s.\n","The Probability of precipitation is {pop:.0%}. There is total volume of {rain:.1f} mm of rain and {snow:.1f} mm of snow.\"\"\"\n","        self.location = None\n","        self.weather = None\n","\n","    def get_location(self, city_name: str, country: str = None, state: str = None) -> dict | str:\n","        \"\"\"Get location information from OpenWeatherMap API.\"\"\"\n","\n","        # prepare location string\n","        location = city_name\n","        if state and (country == \"US\"):\n","            location += f\",{state}\"\n","        if country:\n","            location += f\",{country}\"\n","\n","        # prepare request parameters\n","        params = {\n","            \"q\": location,\n","            \"limit\": 1,\n","            \"appid\": WEATHER_API_KEY\n","        }\n","\n","        # request location information\n","        response = requests.get(\"https://api.openweathermap.org/geo/1.0/direct\", params=params)\n","\n","        # handle response\n","        response = self.handle_response(response)\n","        if isinstance(response, str):\n","            return f\"Could not get location because of following error: {response}\"\n","        loc = response[0]\n","        _ = loc.pop(\"local_names\", None)\n","        return loc\n","\n","    def get_weather(self, city_name: str, country: str = None, state: str = None) -> str:\n","        \"\"\"Get weather information from OpenWeatherMap API.\"\"\"\n","\n","        # get location information\n","        self.location = self.get_location(city_name, country, state)\n","        if isinstance(self.location, str):\n","            return f\"Could not get location because of following error: {self.location}\"\n","\n","        # prepare request parameters\n","        params = {\n","            \"lat\": self.location[\"lat\"],\n","            \"lon\": self.location[\"lon\"],\n","            \"exclude\": \"minutely,hourly,alerts\",\n","            \"units\": \"metric\",\n","            \"appid\": WEATHER_API_KEY\n","        }\n","\n","        # request weather information\n","        self.weather = requests.get(\"https://api.openweathermap.org/data/3.0/onecall\", params=params)\n","\n","        # handle response\n","        self.weather = self.handle_response(self.weather)\n","        if isinstance(self.weather, str):\n","            return f\"Could not get weather because of following error: {self.weather}\"\n","\n","        # format templates and return output\n","        return self.get_output()\n","\n","    def get_output(self) -> str:\n","        \"\"\"Create output string for weather information\"\"\"\n","\n","        # prepare location string\n","        loc = self.location[\"name\"]\n","        if self.location[\"country\"] == \"US\":\n","            loc += f\", {self.location['state']}\"\n","        loc += f\", {self.location['country']}\"\n","\n","        # get current and forecast data\n","        current = self.weather[\"current\"]\n","        forecast = self.weather[\"daily\"]\n","\n","        # extract rain data\n","        rain = current.get(\"rain\", 0)\n","        rain = rain if isinstance(rain, int) else rain.get(\"1h\", 0)\n","\n","        # extract snow data\n","        snow = current.get(\"snow\", 0)\n","        snow = snow if isinstance(snow, int) else snow.get(\"1h\", 0)\n","\n","        # format current weather information template\n","        weather_current = self.current_template.format(\n","            location=loc,\n","            time=datetime.fromtimestamp(current[\"dt\"] + self.weather[\"timezone_offset\"], timezone.utc).strftime('%A %Y-%m-%d %H:%M'),\n","            temp=current[\"temp\"],\n","            humidity=current[\"humidity\"],\n","            uvi=current[\"uvi\"],\n","            clouds=current[\"clouds\"],\n","            wind_speed=current[\"wind_speed\"],\n","            rain=rain,\n","            snow=snow,\n","            weather=current[\"weather\"][0][\"description\"]\n","        )\n","\n","        # format forecast weather information templates\n","        weather_forecasts = [self.future_template.format(\n","            location=loc,\n","            date=datetime.fromtimestamp(data[\"dt\"] + self.weather[\"timezone_offset\"], timezone.utc).strftime('%A %Y-%m-%d'),\n","            summary=data[\"summary\"],\n","            temp_morn=data[\"temp\"][\"morn\"],\n","            temp_day=data[\"temp\"][\"day\"],\n","            temp_eve=data[\"temp\"][\"eve\"],\n","            temp_night=data[\"temp\"][\"night\"],\n","            humidity=data[\"humidity\"],\n","            uvi=data[\"uvi\"],\n","            clouds=data[\"clouds\"],\n","            wind_speed=data[\"wind_speed\"],\n","            pop=data[\"pop\"],\n","            rain=data.get(\"rain\", 0),\n","            snow=data.get(\"snow\", 0),\n","            weather=data[\"weather\"][0][\"description\"]\n","        ) for data in forecast[1:]]\n","\n","        # join current and forecast weather information\n","        weather_forecast = \"\\n####\\n\".join(weather_forecasts)\n","\n","        # return context string\n","        return f\"{weather_current}\\n####\\n{weather_forecast}\"\n","\n","    def get_icon_ids(self) -> list[str]:\n","        \"\"\"Get icon ids for weather forecast column.\"\"\"\n","        icon_ids = [data[\"weather\"][0][\"icon\"] for data in self.weather[\"daily\"]]\n","        return icon_ids\n","\n","    @staticmethod\n","    def handle_response(response) -> dict | str:\n","        \"\"\"Handle response from OpenWeatherMap API.\"\"\"\n","        match response.status_code:\n","            case 200:\n","                return response.json()\n","            case 400:\n","                return \"400 Bad Request\"\n","            case 401:\n","                return \"401 Unauthorized\"\n","            case 404:\n","                return \"404 Not Found\"\n","            case 429:\n","                return \"429 Too Many Requests\"\n","            case _:\n","                return f\"{response.status_code} Unexpected Error\"\n","\n","\n","def check_open_weather_key() -> bool:\n","    \"\"\"Check if OpenWeatherMap API key is valid.\"\"\"\n","    open_weather = os.getenv(\"OPENWEATHERMAP_API_KEY\", \"\")\n","    if len(open_weather) < 16:\n","        return False\n","    return True"],"metadata":{"id":"VOiAKcwUnXhC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## CONFIGURE APPLICATION FRONT AND BACK END"],"metadata":{"id":"tHygRRzprGBi"}},{"cell_type":"code","source":["from langchain_core.tools import BaseTool\n","from langchain_core.pydantic_v1 import BaseModel, Field\n","from langchain_core.callbacks import CallbackManagerForToolRun\n","from typing import Optional, Type\n","\n","\n","class OpenWeatherMapInput(BaseModel):\n","    \"\"\"Input schema for OpenWeatherMap tool.\"\"\"\n","\n","    city: str = Field(\n","        description=\"The city for which to fetch weather information as string e.g. 'London' or 'Berlin'.\"\n","    )\n","    country: Optional[str] = Field(\n","        default=None,\n","        min_length=2,\n","        max_length=2,\n","        description=\"The two letter country code for the city if applicable as string e.g. 'GB' or 'DE'.\"\n","    )\n","    state: Optional[str] = Field(\n","        default=None,\n","        min_length=2,\n","        max_length=2,\n","        description=\"The two letter state code for the city if applicable as string e.g. 'NY'. Only for cities in the US.\"\n","    )"],"metadata":{"id":"0bgTSLKQnRzr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1741962096911,"user_tz":240,"elapsed":1545,"user":{"displayName":"Daniel Lee (Danycraft)","userId":"12763388381882523006"}},"outputId":"e3714036-0bd7-48e7-f00a-4fd8c79fdb12"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/IPython/core/interactiveshell.py:3553: LangChainDeprecationWarning: As of langchain-core 0.3.0, LangChain uses pydantic v2 internally. The langchain_core.pydantic_v1 module was a compatibility shim for pydantic v1, and should no longer be used. Please update the code to import from Pydantic directly.\n","\n","For example, replace imports like: `from langchain_core.pydantic_v1 import BaseModel`\n","with: `from pydantic import BaseModel`\n","or the v1 compatibility namespace if you are working in a code base that has not been fully upgraded to pydantic 2 yet. \tfrom pydantic.v1 import BaseModel\n","\n","  exec(code_obj, self.user_global_ns, self.user_ns)\n"]}]},{"cell_type":"code","source":["class OpenWeatherMapQuery(BaseTool):\n","    \"\"\"Tool that queries the OpenWeatherMap API.\"\"\"\n","\n","    api_wrapper: OpenWeatherMapAPIWrapper = Field(default_factory=OpenWeatherMapAPIWrapper)\n","\n","    name: str = \"OpenWeatherMap\"\n","    description: str = \"\"\"A wrapper around OpenWeatherMap API.\n","    Useful for fetching current and future weather information for a specified location.\n","    Input must be at least a city string (e.g. 'London').\n","    To avoid ambiguity, in addition to the city, a two letter country code can be passed (e.g. 'London', 'GB').\n","    Additionally, only for the US a two letter state code can be passed (e.g. 'Ontario', 'US', 'NY').\"\"\"\n","\n","    args_schema: Type[BaseModel] = OpenWeatherMapInput\n","    return_direct: bool = False\n","\n","    def _run(self, city: str, country: Optional[str] = None, state: Optional[str] = None,\n","             run_manager: Optional[CallbackManagerForToolRun] = None) -> str:\n","        \"\"\"Use the OpenWeatherMap tool.\"\"\"\n","        return self.api_wrapper.get_weather(city, country, state)"],"metadata":{"id":"_e4c_3SOnil6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## CONFIGURING WEATHER INFO ANALYST AGENT"],"metadata":{"id":"r9bfAjzirrLn"}},{"cell_type":"code","source":["from langchain_openai import ChatOpenAI\n","from langchain.agents import AgentExecutor, create_tool_calling_agent\n","from langchain_core.prompts import ChatPromptTemplate\n","from langchain.memory import ConversationBufferWindowMemory\n","import os\n","\n","\n","def setup_agent(model, temperature, verbose) -> tuple:\n","    \"\"\"Set up the chatbot agent and tools.\"\"\"\n","\n","    # Create an instance of the ChatOpenAI model\n","    llm = ChatOpenAI(model=model, temperature=temperature, max_retries=2, max_tokens=500, n=1, streaming=False)\n","\n","    # Load the tools\n","    tools = [OpenWeatherMapQuery()]\n","\n","    # Create a prompt template for the chatbot\n","    prompt = ChatPromptTemplate.from_messages(\n","        [\n","            (\"system\", \"\"),\n","            (\"placeholder\", \"{chat_history}\"),\n","            (\"human\", \"{input}\"),\n","            (\"placeholder\", \"{agent_scratchpad}\"),\n","        ]\n","    )\n","\n","    # Create a memory object to store the chat history\n","    memory = ConversationBufferWindowMemory(k=4, memory_key=\"chat_history\", return_messages=True)\n","\n","    # Construct the Tools agent\n","    agent = create_tool_calling_agent(llm, tools, prompt)\n","\n","    # Create an agent executor by passing in the agent and tools\n","    agent_executor = AgentExecutor(\n","        agent=agent,\n","        tools=tools,\n","        verbose=verbose,\n","        handle_parsing_errors=True,\n","        memory=memory,\n","        max_iterations=3,\n","    )\n","\n","    # Return the agent and tools\n","    return agent_executor, tools\n","\n","\n","def query_llm(agent, question: str, return_history: bool = False) -> dict | str:\n","    \"\"\"Queries the LLM with the given question and returns the response.\"\"\"\n","    ai_response = agent.invoke({\"input\": question})\n","    if return_history:\n","        return ai_response\n","    return ai_response[\"output\"]\n","\n","\n","def check_open_ai_key() -> bool:\n","    \"\"\"Check if the OpenAI API key is set.\"\"\"\n","    if len(OPENAI_API_KEY) < 16:\n","        return False\n","    return True"],"metadata":{"id":"rGYtB0OErNPg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##  Update Message Funcion\n"],"metadata":{"id":"wYqNgao05yC_"}},{"cell_type":"code","source":["from itertools import chain, zip_longest\n","\n","def update_messages(questions: list, answers: list) -> list:\n","    \"\"\"Update the display of the conversation.\"\"\"\n","    messages = []\n","\n","    # Combine the questions and answers\n","    history = [x for x in chain(*zip_longest(questions, answers)) if x is not None]\n","\n","    # Create the initial message\n","    initial_msg = \"Hi, my name is Sky! How can I help you?\"\n","    messages.append(initial_msg)\n","\n","    # Create the message boxes\n","    messages.extend(history)\n","\n","    # Return the updated display\n","    return initial_msg"],"metadata":{"id":"NZCSwAPfPpqA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# DEPLOY AND RUN THE APPLICATION"],"metadata":{"id":"IdecbrOWr6_u"}},{"cell_type":"code","source":["agent, tools = setup_agent(model=\"gpt-4o-mini\", temperature=0.5, verbose=False)\n","\n","\n","def get_weather_report(user_input):\n","    \"\"\"Runs the chatbot in online or offline mode and returns the answer history.\"\"\"\n","\n","    # Return warning message if OpenAI API key is missing\n","    if not check_open_ai_key():\n","        res = \"It seems that your OpenAI API key is missing. Please provide valid API keys to chat with the bot or enable 'Offline Mode'.\"\n","    # Return warning message if OpenWeatherMap API key is missing\n","    elif not check_open_weather_key():\n","        warning = (\"It seems that your OpenWeatherMap API key is missing or invalid. \"\n","                   \"Please provide valid API keys to get real-time weather data.\")\n","        # Try to query the chatbot without real-time weather data\n","        try:\n","            response = query_llm(agent, user_input)\n","        except Exception as e:\n","            response = str(e)\n","        # Append the response and warning message to the answer history\n","        res = f\"{response}\\n\\n**Note:** {warning}\"\n","    # Run the chatbot in online mode\n","    else:\n","        # Try to query the chatbot\n","        try:\n","            response = query_llm(agent, user_input)\n","        # Return error message if an exception occurs\n","        except Exception as e:\n","            response = f\"**Oops! Something went wrong:** \\n\\n{e}\"\n","        res = response\n","    return res\n","\n","\n","\n","if __name__ == \"__main__\":\n","    print(\"Enter quit at any point to end conversation.\")\n","    initial_msg = \"Hi, my name is Sky! How can I help you?\\n\"\n","    msg = None\n","    while True:\n","        user = input(msg if msg else initial_msg)\n","        if user.lower() == \"quit\":\n","            break\n","\n","        try:\n","            msg = get_weather_report(user)\n","        except Exception as e:\n","            print(f\"Error: {str(e)}\\n\")\n","            msg = \"Seems there was an issue please try again.\""],"metadata":{"id":"PtEtBWTm5mEZ"},"execution_count":null,"outputs":[]}]}